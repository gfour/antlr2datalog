#include "schema.dl"
#include "base-logic.dl"
#include "areas.dl"

// Only named function definitions, no lambdas.
BASE_FunctionDefinition(statId, name, LOCATION(path, line, pos)) :-
  db_LUA.Stat_funcname(statId, fnId),
  db_LUA.Funcname_NAME(fnId, terminal, _),
  BASE_Terminal(terminal, name, line, _, _, pos),
  ID_PATH(statId, path).
// Local functions.
BASE_Modifier(statId, "local"),
BASE_FunctionDefinition(statId, name, LOCATION(path, line, pos)) :-
  db_LUA.Stat_NAME(statId, terminal),
  BASE_Terminal(terminal, name, line, _, _, pos),
  db_LUA.Stat_funcbody(statId, _),
  ID_PATH(fnId, path).

// No distinction between declarations and definitions.
BASE_FunctionDeclaration(fd, name, location) :-
  BASE_FunctionDefinition(fd, name, location).

BASE_StringConstant(str, LOCATION(path, line, pos)) :-
  db_LUA.String_NORMALSTRING(id, terminal),
  BASE_Terminal(terminal, str, line, _, _, pos),
  ID_PATH(id, path).

BASE_isScope(id) :- db_LUA.isFuncbody(id).
BASE_isScope(id) :- db_LUA.isBlock(id).

BASE_FunctionParameter(fd, id, v, idx, LOCATION(path, line, pos)) :-
  BASE_FunctionDefinition(fd, _, _),
  db_LUA.Stat_funcbody(fd, fBody),
  db_LUA.Funcbody_parlist(fBody, pl),
  db_LUA.Parlist_namelist(pl, nl),
  db_LUA.Namelist_NAME(nl, id, idx),
  BASE_Terminal(id, v, line, _, _, pos),
  ID_PATH(fd, path).

// Local variable assignments.
BASE_VariableDeclaration(terminal, v, LOCATION(path, line, pos)) :-
  db_LUA.Stat_varlist(stat, vl),
  db_LUA.Varlist_var_(vl, var, _),
  db_LUA.Var__NAME(var, terminal),
  BASE_Terminal(terminal, v, line, _, _, pos),
  ID_PATH(stat, path).

// There are not type definitions in Lua: all types are variants of
// the "dictionary" data structure.
BASE_Type(id, name, loc) :- U = "LUA/UNSUPPORTED:0:0", id = U, name = U, loc = U.
