#include "schema.dl"
#include "base-logic.dl"
#include "patterns.dl"
#include "areas.dl"

.decl Functionlike(id: Id, name: symbol, location: Loc, paramsAndQuals: Id)
.output Functionlike

Functionlike(uid, name, LOCATION(path, line, pos), paqId) :-
  db_CPP.UnqualifiedId_Identifier(uid, terminal),
  BASE_Terminal(terminal, name, line, _, _, pos),
  UP_PATH4(uid, db_CPP.isIdExpression, db_CPP.isDeclaratorid, db_CPP.isNoPointerDeclarator, db_CPP.isNoPointerDeclarator, npDecl),
  BASE_ParentOf(npDecl, paqId),
  db_CPP.ParametersAndQualifiers_LeftParen(paqId, _),
  db_CPP.ParametersAndQualifiers_RightParen(paqId, _),
  ID_PATH(uid, path).

BASE_FunctionDeclaration(blockDecl, name, loc) :-
  Functionlike(id, name, loc, _),
  BASE_RecParentOf(blockDecl, id),
  db_CPP.isBlockDeclaration(blockDecl).

BASE_FunctionDefinition(funcDef, name, loc) :-
  Functionlike(id, name, loc, _),
  BASE_RecParentOf(funcDef, id),
  db_CPP.isFunctionDefinition(funcDef).

BASE_Modifier(funcDef, mod) :-
  db_CPP.FunctionDefinition_declSpecifierSeq(funcDef, dsSeq),
  db_CPP.DeclSpecifierSeq_declSpecifier(dsSeq, ds, _),
  db_CPP.DeclSpecifier_functionSpecifier(ds, funcSpec),
  ( db_CPP.FunctionSpecifier_Inline(funcSpec, terminal)
  ; db_CPP.FunctionSpecifier_Explicit(funcSpec, terminal)
  ; db_CPP.FunctionSpecifier_Virtual(funcSpec, terminal)),
  BASE_Terminal(terminal, mod, _, _, _, _).

BASE_StringConstant(str, LOCATION(path, line, pos)) :-
  db_CPP.Literal_StringLiteral(id, terminal),
  BASE_Terminal(terminal, str, line, _, _, pos),
  ID_PATH(id, path).

BASE_Type(typeSpec, name, LOCATION(path, line, pos)) :-
  UP_PATH4(className, db_CPP.isClassHeadName, db_CPP.isClassHead, db_CPP.isClassSpecifier, db_CPP.isTypeSpecifier, typeSpec),
  db_CPP.ClassName_Identifier(className, terminal),
  BASE_Terminal(terminal, name, line, _, _, pos),
  ID_PATH(typeSpec, path).

BASE_isScope(id) :- db_CPP.isLambdaIntroducer(id).
BASE_isScope(id) :- db_CPP.isCompoundStatement(id).

// Variable declarations from function parameters.
BASE_VariableDeclaration(id, v, LOCATION(path, line, pos)) :-
  Functionlike(func, _, _, paqId),
  db_CPP.ClassName_Identifier(_, id),
  BASE_Terminal(id, v, line, _, _, pos),
  BASE_RecParentOf(paqId, id),
  ID_PATH(func, path).
// Local variable declarations.
BASE_VariableDeclaration(id, v, LOCATION(path, line, pos)) :-
  db_CPP.UnqualifiedId_Identifier(uId, id),
  BASE_Terminal(id, v, line, _, _, pos),
  UP_PATH6(uId, db_CPP.isIdExpression, db_CPP.isDeclaratorid, db_CPP.isNoPointerDeclarator, db_CPP.isPointerDeclarator, db_CPP.isDeclarator, db_CPP.isInitDeclarator, di),
  ID_PATH(di, path).
