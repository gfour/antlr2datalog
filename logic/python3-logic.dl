#include "schema.dl"
#include "base-logic.dl"

BASE_FunctionDefinition(fd, name, location) :-
  Funcdef_NAME(fd, _, name, line, _, _, pos),
  ID_PATH(fd, path),
  location = LOCATION(path, line, pos).
// In Python, function definition = declaration.
BASE_FunctionDeclaration(fd, name, location) :-
  BASE_FunctionDefinition(fd, name, location).

.decl isAssign(id: Id, location: Loc)
isAssign(id, location) :-
  ID_PATH(id, path),
  Expr_stmt_ASSIGN(id, _, _, "=", line, _, _, pos),
  location = LOCATION(path, line, pos).

.decl NameInAssignment(id: Id, n: symbol, location: Loc)
.output NameInAssignment

NameInAssignment(atomId, n, location) :-
  ID_PATH(atomId, path),
  Atom_NAME(atomId, _, n, line, _, _, pos),
  BASE_RecParentOf(exprStmtId, atomId),
  BASE_ParentOf(exprStmtId, assignId),
  isAssign(assignId, _),
  location = LOCATION(path, line, pos).

.decl FunctionUsesName(f: symbol, fLocation: Loc, v: symbol, vLocation: Loc)
.output FunctionUsesName

FunctionUsesName(f, fLocation, n, nLocation) :-
  BASE_FunctionDefinition(fd, f, fLocation),
  NameInAssignment(id, n, nLocation),
  BASE_RecParentOf(fd, id).

.decl Func_Name(id: Id, name: symbol)
.output Func_Name
Func_Name(id, name) :- Funcdef_NAME(id, _, name, _, _, _, _).

.decl NestedFunction(outerName: symbol, outerLoc: Loc, innerName: symbol, innerLoc: Loc)
.output NestedFunction

NestedFunction(oName, outerLoc, iName, innerLoc) :-
  ID_PATH(outer, path),
  Funcdef_NAME(outer, _, oName, oLine, _, _, oPos),
  BASE_RecParentOf(outer, inner),
  Funcdef_NAME(inner, _, iName, iLine, _, _, iPos),
  outerLoc = LOCATION(path, oLine, oPos),
  innerLoc = LOCATION(path, iLine, iPos).

.decl Class(id: Id, name: symbol, loc: Loc)
.output Class

Class(id, name, LOCATION(path, line, pos)) :-
  ID_PATH(id, path),
  Classdef_NAME(id, _, name, line, _, _, pos).

BASE_StringConstant(str, LOCATION(path, line, pos)) :-
  Atom_STRING(id, _, _, str, line, _, _, pos),
  ID_PATH(id, path).
