#include "schema.dl"
#include "base-logic.dl"
#include "patterns.dl"
#include "areas.dl"

// The function-declarator part of both declarations and definitions of functions.
.decl FunctionDeclarator(id: Id, name: symbol, location: Loc)
.output FunctionDeclarator
FunctionDeclarator(dd2_id, name, LOCATION(path, line, pos)) :-
  db_C.DirectDeclarator_Identifier(dd_id, terminal),
  BASE_Terminal(terminal, name, line, _, _, pos),
  BASE_ParentOf(dd2_id, dd_id),
  db_C.DirectDeclarator_LeftParen(dd2_id, _),
  db_C.DirectDeclarator_RightParen(dd2_id, _),
  ID_PATH(dd2_id, path).

BASE_FunctionDeclaration(extDeclId, name, location) :-
  FunctionDeclarator(dd2_id, name, location),
  BASE_RecParentOf(declId, dd2_id),
  db_C.isDeclaration(declId),
  BASE_ParentOf(extDeclId, declId),
  db_C.isExternalDeclaration(extDeclId).

BASE_FunctionDefinition(fd, name, location) :-
  FunctionDeclarator(dd2_id, name, location),
  BASE_RecParentOf(fd, dd2_id),
  db_C.isFunctionDefinition(fd).

.decl CPP_Function_Specifier(fd: Id, specifier: Id)
.output CPP_Function_Specifier

// Group together different kinds of C++ function specifiers.
CPP_Function_Specifier(fd, specifier) :-
  BASE_FunctionDefinition(fd, _, _),
  db_C.FunctionDefinition_declarationSpecifiers(fd, declSpecs),
  db_C.DeclarationSpecifiers_declarationSpecifier(declSpecs, declSpec, _),
  ( db_C.DeclarationSpecifier_functionSpecifier(declSpec, specifier)
  ; db_C.DeclarationSpecifier_storageClassSpecifier(declSpec, specifier)
  ; db_C.DeclarationSpecifier_typeQualifier(declSpec, specifier)).

BASE_Modifier(fd, mod) :-
  CPP_Function_Specifier(fd, specifier),
  BASE_ParentOf(specifier, terminal),
  BASE_Terminal(terminal, mod, _, _, _, _).

BASE_StringConstant(str, LOCATION(path, line, pos)) :-
  db_C.PrimaryExpression_StringLiteral(id, terminal, _),
  BASE_Terminal(terminal, str, line, _, _, pos),
  ID_PATH(id, path).

BASE_isScope(id) :- db_C.isCompoundStatement(id).
BASE_isScope(id) :- db_C.isStructDeclarationList(id).

.decl C_Param(pd: db_C.ParameterDeclaration, idx: number)
.output C_Param

// Innermost (last) parameter declaration.
C_Param(pd, 0) :-
  db_C.ParameterList_parameterDeclaration(pl, pd),
  !db_C.ParameterList_parameterList(pl, _).
// Parameter declaration at pos (i+1) after pos (i).
C_Param(pd, i + 1) :-
  db_C.ParameterList_parameterDeclaration(pl, pd),
  db_C.ParameterList_parameterList(pl, pl0),
  db_C.ParameterList_parameterDeclaration(pl0, pd0),
  C_Param(pd0, i).

.decl C_Function_ParameterDecl(fd: db_C.FunctionDefinition, pd: db_C.ParameterDeclaration, idx: number)
.output C_Function_ParameterDecl

C_Function_ParameterDecl(fd, pd, i) :-
  C_Param(pd, i),
  BASE_RecParentOf(ptl, pd),
  UP_PATH4(ptl, db_C.isParameterTypeList, db_C.isDirectDeclarator, db_C.isDeclarator, db_C.isFunctionDefinition, fd).

BASE_Function_Arity(fd, a) :-
  BASE_FunctionDefinition(fd, _, _),
  a = count : { C_Function_ParameterDecl(fd, _, _) }.

BASE_FunctionParameter(fd, id, v, idx, LOCATION(path, line, pos)) :-
  C_Function_ParameterDecl(fd, pd, idx),
  db_C.DirectDeclarator_Identifier(dd, id),
  BASE_Terminal(id, v, line, _, _, pos),
  UP_PATH2(dd, db_C.isDeclarator, db_C.isParameterDeclaration, pd),
  ID_PATH(pd, path).

// Variable declarations from function parameters.
BASE_VariableDeclaration(id, v, location) :-
  BASE_FunctionParameter(_, id, v, _, location).
// Local variable declarations.
BASE_VariableDeclaration(id, v, LOCATION(path, line, pos)) :-
  db_C.DirectDeclarator_Identifier(dd, id),
  BASE_Terminal(id, v, line, _, _, pos),
  UP_PATH2(dd, db_C.isDeclarator, db_C.isInitDeclarator, idecl),
  ID_PATH(idecl, path).
