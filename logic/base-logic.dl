#pragma once

// Recursive case for parent-of relation.
.decl BASE_RecParentOf(a: symbol, b: symbol)

BASE_RecParentOf(a, b) :- BASE_ParentOf(a, b).
BASE_RecParentOf(a, c) :- BASE_RecParentOf(a, b), BASE_ParentOf(b, c).

#ifdef DEBUG

.output BASE_ParentOf
.output BASE_SourceFileId
.output BASE_RecParentOf

.decl Parent3(a1: symbol, a2: symbol, a3: symbol)
.output Parent3
Parent3(a1, a2, a3) :- BASE_ParentOf(a1, a2), BASE_ParentOf(a2, a3).

.decl Parent4(a1: symbol, a2: symbol, a3: symbol, a4: symbol)
.output Parent4
Parent4(a1, a2, a3, a4) :- Parent3(a1, a2, a3), BASE_ParentOf(a3, a4).

.decl Parent5(a1: symbol, a2: symbol, a3: symbol, a4: symbol, a5: symbol)
.output Parent5
Parent5(a1, a2, a3, a4, a5) :- Parent4(a1, a2, a3, a4), BASE_ParentOf(a4, a5).

#endif // DEBUG

.type Id = symbol
.type Loc = symbol

#define LOCATION(path, line, pos) cat(path, cat(":", cat(to_string(line), cat(":", to_string(pos)))))

#define ID_PATH(id, path) \
  BASE_RecParentOf(MACROrootNode, id), \
  BASE_SourceFileId(path, _, MACROrootNode)

// Function "name" declared at source file "location".
.decl BASE_FunctionDeclaration(id: Id, func: symbol, loc: Loc)
.output BASE_FunctionDeclaration
// Function "name" defined at source file "location".
.decl BASE_FunctionDefinition(id: Id, func: symbol, loc: Loc)
.output BASE_FunctionDefinition
// String constant "str" appears at source file "location".
.decl BASE_StringConstant(str: symbol, location: Loc)
.output BASE_StringConstant

// A code scope (e.g. a block or a class declaration body).
.decl BASE_isScope(id: Id)
.output BASE_isScope

.decl BASE_ScopesOverlap(b1: Id, b2: Id)
.output BASE_ScopesOverlap
BASE_ScopesOverlap(b1, b2) :-
  BASE_isScope(b1),
  BASE_isScope(b2),
  b1 != b2,
  (BASE_RecParentOf(b1, b2) ; BASE_RecParentOf(b2, b1)).

.decl BASE_Node_Scope(node: Id, scope: Id)
.output BASE_Node_Scope
BASE_Node_Scope(node, scope) :-
  BASE_ParentOf(scope, node),
  BASE_isScope(scope).
BASE_Node_Scope(node, scope) :-
  BASE_Node_Scope(node0, scope),
  BASE_ParentOf(node0, node).

// The number of arguments that an argument receives (no vararg support).
.decl BASE_Function_Arity(fd: Id, a: number)
.output BASE_Function_Arity

BASE_Function_Arity(fd, a) :-
  BASE_FunctionDefinition(fd, _, _),
  a = count : { BASE_FunctionParameter(fd, _, _, _, _) }.

.decl BASE_FunctionParameter(fd: Id, id: Id, v: symbol, idx: number, loc: Loc)
.output BASE_FunctionParameter

.decl BASE_VariableDeclaration(id: Id, v: symbol, loc: Loc)
.output BASE_VariableDeclaration

// Variable declarations from function parameters.
BASE_VariableDeclaration(id, v, loc) :-
  BASE_FunctionParameter(_, id, v, _, loc).

.decl BASE_VariableDeclaration_Scope(vdecl:Id, scope:Id)
.output BASE_VariableDeclaration_Scope

// Variable declarations and scopes
BASE_VariableDeclaration_Scope(vdecl, scope) :-
  BASE_VariableDeclaration(vdecl, _, _),
  BASE_Node_Scope(vdecl, scope).

.decl BASE_VariableMayShadow(id1: Id, id2: Id, v: symbol)
.output BASE_VariableMayShadow

BASE_VariableMayShadow(id1, id2, v) :-
  BASE_VariableDeclaration(id1, v, _),
  BASE_VariableDeclaration(id2, v, _),
  id1 != id2,
  BASE_RecParentOf(id1, b1),
  BASE_RecParentOf(id2, b2),
  BASE_ScopesOverlap(b1, b2).

.decl BASE_Modifier(id: Id, mod: symbol)
.output BASE_Modifier

// Type "name" defined at source file "location".
.decl BASE_Type(id: Id, name: symbol, location: Loc)
.output BASE_Type

// Field "name" defined at source file "location".
.decl BASE_Field(id: Id, name: symbol, location: Loc)
.output BASE_Field

.decl BASE_Field_DeclaringType(field: Id, type: Id)
.output BASE_Field_DeclaringType

// Where a function starts.
.decl BASE_Function_StartLoc(id: Id, startLine: number, startColumn: number)
.output BASE_Function_StartLoc
// Where a function ends.
.decl BASE_Function_EndLoc(id: Id, endLine: number, endColumn: number)
.output BASE_Function_EndLoc
// The area covered by a function.
.decl BASE_Function_Area(id: Id, startLine: number, startColumn: number, endLine: number, endColumn: number)
.output BASE_Function_Area
BASE_Function_Area(id, startLine, startColumn, endLine, endColumn) :-
  BASE_Function_StartLoc(id, startLine, startColumn),
  BASE_Function_EndLoc(id, endLine, endColumn).
