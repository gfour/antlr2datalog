#include "schema.dl"
#include "base-logic.dl"
#include "patterns.dl"

.decl DeclaredVariable(varName: symbol)
.output DeclaredVariable

DeclaredVariable(varName) :-
  db_KOTLIN.VariableDeclaration_simpleIdentifier(_, id),
  db_KOTLIN.SimpleIdentifier_Identifier(id, _, varName, _, _, _, _).

.decl UsedVariable(varName: symbol)
.output UsedVariable

UsedVariable(varName) :-
  DeclaredVariable(varName),
  db_KOTLIN.PrimaryExpression_simpleIdentifier(_, id),
  db_KOTLIN.SimpleIdentifier_Identifier(id, _, varName, _, _, _, _).

BASE_StringConstant(str, LOCATION(path, line, pos)) :-
  ( db_KOTLIN.LineStringContent_LineStrText(id, _, str, line, _, _, pos)
  ; db_KOTLIN.MultiLineStringContent_MultiLineStrText(id, _, str, line, _, _, pos)),
  ID_PATH(id, path).

BASE_Type(classDecl, name, LOCATION(path, line, pos)) :-
  db_KOTLIN.ClassDeclaration_simpleIdentifier(classDecl, identId),
  db_KOTLIN.SimpleIdentifier_Identifier(identId, _, name, line, _, _, pos),
  ID_PATH(classDecl, path).

.decl FuncDefOrDecl(id: Id, name: symbol, location: Loc)

FuncDefOrDecl(fd, name, LOCATION(path, line, pos)) :-
  db_KOTLIN.FunctionDeclaration_simpleIdentifier(fd, identId),
  db_KOTLIN.SimpleIdentifier_Identifier(identId, _, name, line, _, _, pos),
  ID_PATH(fd, path).

BASE_FunctionDefinition(fd, name, location) :-
  FuncDefOrDecl(fd, name, location),
  db_KOTLIN.FunctionDeclaration_functionBody(fd, _).

BASE_FunctionDeclaration(fd, name, location) :-
  FuncDefOrDecl(fd, name, location),
  !db_KOTLIN.FunctionDeclaration_functionBody(fd, _).

BASE_isScope(id) :- db_KOTLIN.isClassBody(id).
BASE_isScope(id) :- db_KOTLIN.isEnumClassBody(id).
BASE_isScope(id) :- db_KOTLIN.isBlock(id).
BASE_isScope(id) :- db_KOTLIN.isWhenEntry(id).

// Recognize all Kotlin bindings (variables/fields).
.decl KotlinBinding(vDeclId: Id, name: symbol, loc: Loc)
.output KotlinBinding

KotlinBinding(vDeclId, name, LOCATION(path, line, pos)) :-
  db_KOTLIN.VariableDeclaration_simpleIdentifier(vDeclId, identId),
  db_KOTLIN.SimpleIdentifier_Identifier(identId, _, name, line, _, _, pos),
  ID_PATH(vDeclId, path).
// Handle nested multi-variable declarations.
KotlinBinding(mvDeclId, name, loc) :-
  KotlinBinding(vDeclId, name, loc),
  db_KOTLIN.MultiVariableDeclaration_variableDeclaration(mvDeclId, vDeclId, _).

// Recognize Kotlin fields (subset of KotlinBinding).
.decl KotlinField(field: Id, name: symbol, loc: Loc)
.output KotlinField

// Top-level objects are considered fields (of compiler-generated classes).
KotlinField(field, name, loc) :-
  KotlinBinding(field, name, loc),
  UP_PATH3(field, db_KOTLIN.isPropertyDeclaration, db_KOTLIN.isDeclaration, db_KOTLIN.isTopLevelObject, tloId).
// Class body fields.
KotlinField(field, name, loc) :-
  KotlinBinding(field, name, loc),
  UP_PATH3(field, db_KOTLIN.isPropertyDeclaration, db_KOTLIN.isDeclaration, db_KOTLIN.isClassMemberDeclaration, memDeclId).

// Variable declarations from function parameters.
BASE_VariableDeclaration(paramId, v, LOCATION(path, line, pos)) :-
  db_KOTLIN.FunctionValueParameter_parameter(_, paramId),
  db_KOTLIN.Parameter_simpleIdentifier(paramId, identId),
  db_KOTLIN.SimpleIdentifier_Identifier(identId, _, v, line, _, _, pos),
  ID_PATH(identId, path).
// Local variable assignments.
BASE_VariableDeclaration(id, v, loc) :-
  KotlinBinding(id, v, loc),
  !KotlinField(id, _, _).

.decl KotlinVal(propertyId: Id)
.output KotlinVal

KotlinVal(id) :- db_KOTLIN.PropertyDeclaration_VAL(id, _, "val", _, _, _, _).

.decl PropertyModifier(propertyId: Id, modId: Id)
.output PropertyModifier

PropertyModifier(prop, mod) :-
  db_KOTLIN.PropertyDeclaration_modifiers(prop, modifiers),
  db_KOTLIN.Modifiers_modifier(modifiers, modifier, _),
  ( db_KOTLIN.Modifier_classModifier(modifier, mod)
  ; db_KOTLIN.Modifier_memberModifier(modifier, mod)
  ; db_KOTLIN.Modifier_visibilityModifier(modifier, mod)
  ; db_KOTLIN.Modifier_functionModifier(modifier, mod)  
  ; db_KOTLIN.Modifier_propertyModifier(modifier, mod)
  ; db_KOTLIN.Modifier_inheritanceModifier(modifier, mod)
  ; db_KOTLIN.Modifier_parameterModifier(modifier, mod)
  ; db_KOTLIN.Modifier_platformModifier(modifier, mod)).

BASE_Modifier(prop, m) :-
  PropertyModifier(prop, mod),
  ( db_KOTLIN.ClassModifier_ENUM(mod, _, m, _, _, _, _)
  ; db_KOTLIN.ClassModifier_SEALED(mod, _, m, _, _, _, _)
  ; db_KOTLIN.ClassModifier_ANNOTATION(mod, _, m, _, _, _, _)
  ; db_KOTLIN.ClassModifier_DATA(mod, _, m, _, _, _, _)
  ; db_KOTLIN.ClassModifier_INNER(mod, _, m, _, _, _, _)
  ; db_KOTLIN.MemberModifier_OVERRIDE(mod, _, m, _, _, _, _)
  ; db_KOTLIN.MemberModifier_LATEINIT(mod, _, m, _, _, _, _)
  ; db_KOTLIN.VisibilityModifier_PUBLIC(mod, _, m, _, _, _, _)
  ; db_KOTLIN.VisibilityModifier_PRIVATE(mod, _, m, _, _, _, _)
  ; db_KOTLIN.VisibilityModifier_INTERNAL(mod, _, m, _, _, _, _)
  ; db_KOTLIN.VisibilityModifier_PROTECTED(mod, _, m, _, _, _, _)
  ; db_KOTLIN.FunctionModifier_TAILREC(mod, _, m, _, _, _, _)
  ; db_KOTLIN.FunctionModifier_OPERATOR(mod, _, m, _, _, _, _)
  ; db_KOTLIN.FunctionModifier_INFIX(mod, _, m, _, _, _, _)
  ; db_KOTLIN.FunctionModifier_INLINE(mod, _, m, _, _, _, _)
  ; db_KOTLIN.FunctionModifier_EXTERNAL(mod, _, m, _, _, _, _)
  ; db_KOTLIN.FunctionModifier_SUSPEND(mod, _, m, _, _, _, _)
  ; db_KOTLIN.PropertyModifier_CONST(mod, _, m, _, _, _, _)
  ; db_KOTLIN.InheritanceModifier_ABSTRACT(mod, _, m, _, _, _, _)
  ; db_KOTLIN.InheritanceModifier_FINAL(mod, _, m, _, _, _, _)
  ; db_KOTLIN.InheritanceModifier_OPEN(mod, _, m, _, _, _, _)
  ; db_KOTLIN.ParameterModifier_VARARG(mod, _, m, _, _, _, _)
  ; db_KOTLIN.ParameterModifier_NOINLINE(mod, _, m, _, _, _, _)
  ; db_KOTLIN.ParameterModifier_CROSSINLINE(mod, _, m, _, _, _, _)
  ; db_KOTLIN.PlatformModifier_EXPECT(mod, _, m, _, _, _, _)
  ; db_KOTLIN.PlatformModifier_ACTUAL(mod, _, m, _, _, _, _)).
