/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.clyze.antlr2datalog;

import org.apache.commons.cli.*;

import java.net.MalformedURLException;
import java.util.*;

/**
 * The main application.
 */
public class Main {
    /** Global debug flag. */
    public static boolean debug = false;

    /**
     * The main entry point.
     * @param args  the command-line arguments
     */
    public static void main(String[] args) {
        Options options = new Options();

        Option irOpt = new Option("i", "input", true, "File or directory containing source files.");
        irOpt.setRequired(true);
        irOpt.setArgName("PATH");
        irOpt.setArgs(Option.UNLIMITED_VALUES);
        options.addOption(irOpt);

        Option langOpt = new Option("l", "language", true, "Parser language (available values: " + Arrays.toString(ParserConfiguration.values()) + ").");
        langOpt.setRequired(true);
        langOpt.setArgName("LANGUAGE");
        options.addOption(langOpt);

        Option factsOpt = new Option("f", "facts", true, "Fact generation directory.");
        factsOpt.setRequired(true);
        factsOpt.setArgName("PATH");
        options.addOption(factsOpt);

        String DEFAULT_SCHEMA_PATH = "schema.dl";
        Option schemaOpt = new Option("s", "schema", true, "Schema output file (default: " + DEFAULT_SCHEMA_PATH + ").");
        schemaOpt.setArgName("FILE");
        options.addOption(schemaOpt);

        Option debugOpt = new Option("d", "debug", false, "Enable debug mode.");
        options.addOption(debugOpt);

        if (args.length == 0) {
            printUsage(options);
            return;
        }

        ParserConfiguration parserConfiguration;
        String factsDir, schemaPath = DEFAULT_SCHEMA_PATH;
        String[] inputs;
        CommandLineParser parser = new GnuParser();
        try {
            CommandLine cli = parser.parse(options, args);
            if (cli.hasOption(debugOpt.getOpt()))
                debug = true;
            String lang = cli.getOptionValue('l');
            factsDir = cli.getOptionValue('f');
            inputs = cli.getOptionValues('i');
            if (cli.hasOption('s'))
                schemaPath = cli.getOptionValue('s');
            System.out.println("Using language: " + lang);
            System.out.println("Using facts directory: " + factsDir);
            System.out.println("Output schema written to: " + schemaPath);
            parserConfiguration = ParserConfiguration.valueOf(lang.toUpperCase());
            parserConfiguration.load();
        } catch (ParseException | MalformedURLException | ClassNotFoundException | NoSuchMethodException e) {
            e.printStackTrace();
            printUsage(options);
            return;
        }

        (new Driver(parserConfiguration)).generateSchemaAndParseSources(schemaPath, factsDir, inputs);
    }

    private static void printUsage(Options options) {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setWidth(100);
        formatter.printHelp("antlr2datalog [OPTION]...", options);
    }
}
