plugins {
    id 'java'
    id 'application'
    id 'maven-publish'
    id 'net.researchgate.release' version '2.6.0'
}

repositories {
    mavenLocal()
    maven { url "http://centauri.di.uoa.gr:8081/artifactory/plast-public" }
    jcenter()
}

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

dependencies {
    implementation 'commons-cli:commons-cli:1.2'
    implementation 'commons-io:commons-io:2.4'
    implementation "org.antlr.grammars:grammarsv4:1.0-SNAPSHOT"
    implementation 'org.clyze:metadata-model:2.2.0'
    // Uncomment to support parsers with lowercase requirement (such as PHP).
    // implementation "com.khubla.antlr:antlr4test-maven-plugin:1.17"
    implementation 'org.zeroturnaround:zt-zip:1.13'

    // Use JUnit test framework
    testImplementation(platform('org.junit:junit-bom:5.7.1'))
    testImplementation('org.junit.jupiter:junit-jupiter')
}

String mainClass = 'org.clyze.antlr2datalog.Main'
group = "org.clyze"

application {
    // Define the main class for the application
    mainClassName = mainClass
}

test {
    useJUnitPlatform { }
}

wrapper {
    gradleVersion = '6.7'
}

java {
    withSourcesJar()
    withJavadocJar()
}

javadoc.options.addBooleanOption('Xdoclint:all', true)

task bundleLogic(type: Zip) {
    archiveFileName = 'logic.zip'
    destinationDirectory = file('src/main/resources')
    from file('logic')
}

task copyParsers(type: Copy) {
    println "Copying parsers..."
    String homeDir = System.getProperty("user.home")
    from homeDir + "/.m2/repository/org/antlr/grammars/"
    from 'extra-grammars'
    into "src/main/resources/parsers"
    ['C', 'cobol85', 'CPP14', 'golang', 'kotlin-formal', 'Lua', 'php', 'python3', 'rust'].each { String lang ->
        include "${lang}/**/*.jar"
    }
    include 'solidity/solidity.jar'
}

task cleanResources() {
    println "Cleaning up resources..."
    project.file("src/main/resources/parsers").deleteDir()
    project.file("src/main/resources/logic").deleteDir()
    project.file("src/main/resources/logic.zip").delete()
}
clean.dependsOn cleanResources

task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': mainClass,
                   'Implementation-Version': archiveVersion.get()
    }
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    from project.file('src/main/resources')
    with jar
}
fatJar.dependsOn copyParsers, bundleLogic

artifacts {
    fatJar
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact fatJar
        }
    }
}

if (project.hasProperty('artifactory_user')) {
    publishing {
        repositories {
            maven {
                credentials {
                    username artifactory_user
                    password artifactory_password
                }
                //Always publish to the public releases repo
                url "${artifactory_contextUrl}/libs-public-release-local"
            }
        }
    }
}

release {
    failOnSnapshotDependencies = false
    git {
        requireBranch = 'main'
    }
}
afterReleaseBuild.dependsOn publish
