plugins {
    id 'java'
    id 'application'
    id 'maven-publish'
    id 'net.researchgate.release' version '2.6.0'
}

repositories {
    mavenLocal()
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
//    maven { url 'https://dl.bintray.com/gfour/plast-lab' }
    jcenter()
}

dependencies {
    implementation 'commons-cli:commons-cli:1.2'
    implementation 'commons-io:commons-io:2.4'
    implementation "org.antlr.grammars:grammarsv4:1.0-SNAPSHOT"
    // Uncomment to support parsers with lowercase requirement (such as PHP).
    // implementation "com.khubla.antlr:antlr4test-maven-plugin:1.17"
    implementation 'org.zeroturnaround:zt-zip:1.13'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

String mainClass = 'org.clyze.antlr2datalog.Main'
group = "org.clyze"

application {
    // Define the main class for the application
    mainClassName = mainClass
}

wrapper {
    gradleVersion = "6.2"
}

java {
    withSourcesJar()
    withJavadocJar()
}

task bundleLogic(type: Zip) {
    archiveFileName = 'logic.zip'
    destinationDirectory = file('src/main/resources')
    from file('logic')
}

task cloneSubmodule() {
    doLast {
        exec {
            commandLine 'git', 'submodule', 'update', '--init'
            ignoreExitValue = true
        }
    }
}
task installParsers() {
    doLast {
        def stdout = new ByteArrayOutputStream()
        exec {
            workingDir 'grammars-v4'
            commandLine 'mvn', 'install', '-Dstyle.color=never', '--pl', 'c', '--pl', 'cobol85', '--pl', 'cpp', '--pl', 'kotlin/kotlin-formal', '--pl', 'lua', '--pl', 'php', '--pl', 'python/python3', '--pl', 'rust', '--am'
            ignoreExitValue = true
            standardOutput = stdout
        }
        String out = stdout.toString()
        println out
        if (out.indexOf('[ERROR]') >= 0)
            throw new RuntimeException('Error in Maven installation of parsers')
    }
}
installParsers.dependsOn cloneSubmodule

task copyParsers(type: Copy) {
    println "Copying parsers..."
    String homeDir = System.getProperty("user.home")
    from homeDir + "/.m2/repository/org/antlr/grammars/"
    into "src/main/resources/parsers"
    ['C', 'cobol85', 'CPP14', 'kotlin-formal', 'Lua', 'php', 'python3', 'rust'].each { String lang ->
        include "${lang}/**/*.jar"
    }
}

task cleanResources() {
    println "Cleaning up resources..."
    project.file("src/main/resources/parsers").deleteDir()
    project.file("src/main/resources/logic").deleteDir()
}
clean.dependsOn cleanResources

task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': mainClass,
                   'Implementation-Version': archiveVersion.get()
    }
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    from project.file('src/main/resources')
    with jar
}
fatJar.dependsOn copyParsers, bundleLogic

artifacts {
    fatJar
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact fatJar
        }
    }
}

if (project.hasProperty('artifactory_user')) {
    publishing {
        repositories {
            maven {
                credentials {
                    username artifactory_user
                    password artifactory_password
                }
                //Always publish to the public releases repo
                url "${artifactory_contextUrl}/libs-public-release-local"
            }
        }
    }
}

release {
    failOnSnapshotDependencies = false
    git {
        requireBranch = 'main'
    }
}
afterReleaseBuild.dependsOn publish
